"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[856],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,d=c["".concat(i,".").concat(m)]||c[m]||h[m]||l;return n?a.createElement(d,s(s({ref:t},u),{},{components:n})):a.createElement(d,s({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[c]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<l;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8692:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={},s="GitHub Action",o={unversionedId:"github/index",id:"github/index",title:"GitHub Action",description:"The simplest way to run release-plz is via the GitHub Action.",source:"@site/docs/github/index.md",sourceDirName:"github",slug:"/github/",permalink:"/docs/github/",draft:!1,editUrl:"https://github.com/MarcoIeni/release-plz/tree/main/website/docs/github/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Shell completion",permalink:"/docs/usage/shell-completion"},next:{title:"Triggering further workflows",permalink:"/docs/github/trigger"}},i={},p=[{value:"1. Change GitHub Actions permissions",id:"1-change-github-actions-permissions",level:2},{value:"2. Set the <code>CARGO_REGISTRY_TOKEN</code> secret",id:"2-set-the-cargo_registry_token-secret",level:2},{value:"3. Setup the workflow",id:"3-setup-the-workflow",level:2},{value:"Example: release-pr and release",id:"example-release-pr-and-release",level:3},{value:"Example: release-pr only",id:"example-release-pr-only",level:3},{value:"Example: release only",id:"example-release-only",level:3},{value:"Example: release-pr and release on schedule",id:"example-release-pr-and-release-on-schedule",level:3},{value:"4. Set input variables (optional)",id:"4-set-input-variables-optional",level:2}],u={toc:p},c="wrapper";function h(e){let{components:t,...l}=e;return(0,r.kt)(c,(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"github-action"},"GitHub Action"),(0,r.kt)("p",null,"The simplest way to run release-plz is via the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/marketplace/actions/release-plz"},"GitHub Action"),"."),(0,r.kt)("p",null,"By default, every time you merge a commit to the main branch, the GitHub Action\nruns two commands, one after the other:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/usage/release-pr"},(0,r.kt)("inlineCode",{parentName:"a"},"release-plz release-pr")),": creates the release pr."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/usage/release"},(0,r.kt)("inlineCode",{parentName:"a"},"release-plz release")),": publishes the unpublished packages.")),(0,r.kt)("p",null,"Follow the steps below to set up the GitHub Action."),(0,r.kt)("h2",{id:"1-change-github-actions-permissions"},"1. Change GitHub Actions permissions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Go to the GitHub Actions settings:"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"actions settings",src:n(6741).Z,width:"1484",height:"1212"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'Change "Workflow permissions" to allow GitHub Actions to create and approve\npull requests (needed to create and update the PR).'),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"workflow permission",src:n(2212).Z,width:"1876",height:"634"})))),(0,r.kt)("h2",{id:"2-set-the-cargo_registry_token-secret"},"2. Set the ",(0,r.kt)("inlineCode",{parentName:"h2"},"CARGO_REGISTRY_TOKEN")," secret"),(0,r.kt)("p",null,"Release-plz needs a token to publish your packages to the cargo registry."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Retrieve your registry token following\n",(0,r.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/cargo/reference/publishing.html#before-your-first-publish"},"this"),"\nguide."),(0,r.kt)("li",{parentName:"ol"},"Add your cargo registry token as a secret in your repository following\n",(0,r.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository"},"this"),"\nguide.")),(0,r.kt)("p",null,"As specified in the ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo publish"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/commands/cargo-publish.html#publish-options"},"options"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The token for ",(0,r.kt)("a",{parentName:"li",href:"https://crates.io/"},"crates.io")," shall be specified with the ",(0,r.kt)("inlineCode",{parentName:"li"},"CARGO_REGISTRY_TOKEN"),"\nenvironment variable."),(0,r.kt)("li",{parentName:"ul"},"Tokens for other registries shall be specified with environment variables of the form\n",(0,r.kt)("inlineCode",{parentName:"li"},"CARGO_REGISTRIES_NAME_TOKEN")," where ",(0,r.kt)("inlineCode",{parentName:"li"},"NAME")," is the name of the registry in all capital letters.")),(0,r.kt)("p",null,"If you are creating a new crates.io token, specify the following scope:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"token scope",src:n(3405).Z,width:"1442",height:"460"})),(0,r.kt)("h2",{id:"3-setup-the-workflow"},"3. Setup the workflow"),(0,r.kt)("p",null,"Add the release-plz workflow file under the ",(0,r.kt)("inlineCode",{parentName:"p"},".github/workflows")," directory.\nFor example ",(0,r.kt)("inlineCode",{parentName:"p"},".github/workflows/release-plz.yml"),"."),(0,r.kt)("p",null,"Use one of the following examples as a starting point."),(0,r.kt)("h3",{id:"example-release-pr-and-release"},"Example: release-pr and release"),(0,r.kt)("p",null,"This is the suggested configuration if you are getting started with release-plz.\nWith this configuration, when you make changes to the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," branch:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"release-plz creates a pull request with the new versions,\nwhere it prepares the next release."),(0,r.kt)("li",{parentName:"ul"},"release-plz releases the unpublished packages.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"name: Release-plz\n\npermissions:\n  pull-requests: write\n  contents: write\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release-plz:\n    name: Release-plz\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: Install Rust toolchain\n        uses: dtolnay/rust-toolchain@stable\n      - name: Run release-plz\n        uses: MarcoIeni/release-plz-action@v0.5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}\n")),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fetch-depth: 0")," is needed to clone all the git history, which is necessary to\ndetermine the next version and build the changelog.")),(0,r.kt)("h3",{id:"example-release-pr-only"},"Example: release-pr only"),(0,r.kt)("p",null,"Use this configuration if you want release-plz to only update your packages,\nand you want to handle ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo publish")," and git tag push by yourself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"name: Release-plz\n\npermissions:\n  pull-requests: write\n  contents: write\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release-plz:\n    name: Release-plz\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: Install Rust toolchain\n        uses: dtolnay/rust-toolchain@stable\n      - name: Run release-plz\n        uses: MarcoIeni/release-plz-action@v0.5\n        with:\n          command: release-pr\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n")),(0,r.kt)("h3",{id:"example-release-only"},"Example: release only"),(0,r.kt)("p",null,"Use this configuration if you want release-plz to only release your packages,\nand you want to update ",(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," versions and changelogs by yourself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"name: Release-plz\n\npermissions:\n  pull-requests: write\n  contents: write\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release-plz:\n    name: Release-plz\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: Install Rust toolchain\n        uses: dtolnay/rust-toolchain@stable\n      - name: Run release-plz\n        uses: MarcoIeni/release-plz-action@v0.5\n        with:\n          command: release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}\n")),(0,r.kt)("h3",{id:"example-release-pr-and-release-on-schedule"},"Example: release-pr and release on schedule"),(0,r.kt)("p",null,"In the above examples, release-plz runs every time you merge a commit to the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," branch."),(0,r.kt)("p",null,"To run release-plz periodically, you can use the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/reference/events-that-trigger-workflows#schedule"},(0,r.kt)("inlineCode",{parentName:"a"},"schedule"))," event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"name: Release-plz\n\npermissions:\n  pull-requests: write\n  contents: write\n\n# Trigger the workflow every Monday.\non:\n  schedule:\n    # * is a special character in YAML so you have to quote this string\n    - cron:  '0 0 * * MON'\n\njobs:\n  release-plz:\n    name: Release-plz\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: Install Rust toolchain\n        uses: dtolnay/rust-toolchain@stable\n      - name: Run release-plz\n        uses: MarcoIeni/release-plz-action@v0.5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}\n")),(0,r.kt)("h2",{id:"4-set-input-variables-optional"},"4. Set input variables (optional)"),(0,r.kt)("p",null,"The GitHub action accepts the following input variables:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"command"),": The release-plz command to run. Accepted values: ",(0,r.kt)("inlineCode",{parentName:"li"},"release-pr"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"release"),". (By default it runs both commands)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"registry"),": Registry where the packages are stored.\nThe registry name needs to be present in the Cargo config.\nIf unspecified, crates.io is used. (Defaults to crates.io)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"project_manifest"),": Path to the Cargo.toml of the project you want to update.\nBoth Cargo workspaces and single packages are supported. (Defaults to the root\ndirectory)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version"),": Release-plz version to use. It must be an existing git tag name.\nFor example ",(0,r.kt)("inlineCode",{parentName:"li"},"release-plz-v0.2.45"),". (Default: ",(0,r.kt)("inlineCode",{parentName:"li"},'"latest"'),").")),(0,r.kt)("p",null,"You can specify the input variables by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"with")," keyword.\nFor example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  release-plz:\n    name: Release-plz\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: Install Rust toolchain\n        uses: dtolnay/rust-toolchain@stable\n      - name: Run release-plz\n        uses: MarcoIeni/release-plz-action@v0.5\n        with: # <--- Input variables\n          command: release-pr\n          registry: my-registry\n          project_manifest: rust-crates/my-crate/Cargo.toml\n          version: release-plz-v0.2.45\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}\n")))}h.isMDXComponent=!0},6741:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/actions_settings-29f01e7f00f3c53f1aef4ccc0689b483.png"},3405:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/token_scope-5d0da8f1b61e22bb12823c49db0a3e81.png"},2212:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/workflow_permissions-1b2139cf34240279ab7e14dcd3497b72.png"}}]);