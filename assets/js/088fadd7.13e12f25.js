"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[276],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),b=a,m=p["".concat(l,".").concat(b)]||p[b]||d[b]||i;return t?r.createElement(m,s(s({ref:n},c),{},{components:t})):r.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=b;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},3223:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={},s="Releasing binaries",o={unversionedId:"extra/releasing-binaries",id:"extra/releasing-binaries",title:"Releasing binaries",description:"Why release-plz doesn't release binaries",source:"@site/docs/extra/releasing-binaries.md",sourceDirName:"extra",slug:"/extra/releasing-binaries",permalink:"/docs/extra/releasing-binaries",draft:!1,editUrl:"https://github.com/MarcoIeni/release-plz/tree/main/website/docs/extra/releasing-binaries.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Extra",permalink:"/docs/extra/"},next:{title:"Single changelog",permalink:"/docs/extra/single-changelog"}},l={},u=[{value:"Why release-plz doesn&#39;t release binaries",id:"why-release-plz-doesnt-release-binaries",level:2},{value:"Releasing binaries after release",id:"releasing-binaries-after-release",level:2}],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"releasing-binaries"},"Releasing binaries"),(0,a.kt)("h2",{id:"why-release-plz-doesnt-release-binaries"},"Why release-plz doesn't release binaries"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Since release-plz already publishes GitHub releases, would it\nmake sense for it to build the binaries of the project and publish\nthem to the release assets? \ud83e\udd14")),(0,a.kt)("p",null,"Not really. Releasing binaries requires setting a CI job different\nfrom the one used to run ",(0,a.kt)("inlineCode",{parentName:"p"},"release-plz release")," because:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"release-plz release")," should run once (for example on an ",(0,a.kt)("inlineCode",{parentName:"li"},"ubuntu")," CI image);"),(0,a.kt)("li",{parentName:"ul"},"building binaries requires a different CI image for each platform\n(e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"ubuntu"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"macos"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"windows"),").")),(0,a.kt)("p",null,"Since users have to set up an additional CI job to build binaries, using release-plz\nwould not be more convenient than using a different tool.\nPlus, releasing binaries is a complex task, which is already well-handled by\nother tools in the Rust ecosystem.\nFor these reasons, release-plz doesn't build and release binaries."),(0,a.kt)("p",null,"The next section explains how to use other tools to build and release binaries after\nrelease-plz released the new version of your project."),(0,a.kt)("h2",{id:"releasing-binaries-after-release"},"Releasing binaries after release"),(0,a.kt)("p",null,'If you are using release-plz to release your project, you can\nrun a CI job on the "tag" or "release" events to build and release the binaries.'),(0,a.kt)("p",null,"Here is an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"name: CD # Continuous Deployment\n\npermissions:\n  contents: write\n\non:\n  release:\n    types: [published]\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_GIT_FETCH_WITH_CLI: true\n  CARGO_NET_RETRY: 10\n  CARGO_TERM_COLOR: always\n  RUST_BACKTRACE: 1\n  RUSTFLAGS: -D warnings\n  RUSTUP_MAX_RETRIES: 10\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  upload-assets:\n    name: ${{ matrix.target }}\n    if: github.repository_owner == 'MyOwner' && startsWith(github.event.release.name, 'my-bin-v')\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        include:\n          - target: aarch64-unknown-linux-gnu\n            os: ubuntu-22.04\n          - target: aarch64-unknown-linux-musl\n            os: ubuntu-22.04\n          - target: aarch64-apple-darwin\n            os: macos-12\n          - target: aarch64-pc-windows-msvc\n            os: windows-2022\n          - target: x86_64-unknown-linux-gnu\n            os: ubuntu-22.04\n          - target: x86_64-unknown-linux-musl\n            os: ubuntu-22.04\n          - target: x86_64-apple-darwin\n            os: macos-12\n          - target: x86_64-pc-windows-msvc\n            os: windows-2022\n          - target: x86_64-unknown-freebsd\n            os: ubuntu-22.04\n          - target: universal-apple-darwin\n            os: macos-12\n    timeout-minutes: 60\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Rust toolchain\n        uses: dtolnay/rust-toolchain@stable\n      - uses: taiki-e/setup-cross-toolchain-action@v1\n        with:\n          target: ${{ matrix.target }}\n        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')\n      - uses: taiki-e/install-action@cross\n        if: contains(matrix.target, '-musl')\n      - run: echo \"RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static\" >> \"${GITHUB_ENV}\"\n        if: endsWith(matrix.target, 'windows-msvc')\n      - uses: taiki-e/upload-rust-binary-action@v1\n        with:\n          bin: my-bin\n          target: ${{ matrix.target }}\n          tar: all\n          zip: windows\n          token: ${{ secrets.GITHUB_TOKEN }}\n")),(0,a.kt)("p",null,"Some projects to consider for this task:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/taiki-e/upload-rust-binary-action"},"upload-rust-binary-action"),":\nGitHub Action for building and uploading Rust binary to GitHub Releases."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://crates.io/crates/cargo-dist"},"cargo-dist"),":\nshippable application packaging for Rust.")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"To release a binary after release, the release-plz GitHub Action needs to\n",(0,a.kt)("a",{parentName:"p",href:"/docs/github/trigger"},"trigger further workflow runs"),".")))}d.isMDXComponent=!0}}]);